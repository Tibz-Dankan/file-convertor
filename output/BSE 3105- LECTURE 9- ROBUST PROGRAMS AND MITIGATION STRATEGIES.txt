Using a SM to Handle ExceptionsState Machines &amp; Exceptions:If an exception represents an unexpected but not unanticipated state, then:That unanticipated state will be represented in the “full” state machineBut, it won’t be visited much (if at all)The transition will not be well-defined, because you didn’t anticipate transitioning to that state during normal operation of the object anyway!One way to consider exceptions isin the context of a SM:&#9;What if the light bulb burns out?Could handle as a condition on all transitions for LampOr we could treat as an “exceptional” circumstance and take corrective action – replace the bulb&#9;Use Java type system to handle types of ExceptionsLightBulbException extends java.lang.ExceptionLamp
Some definitions‘rob@example.com’&apos;/^[a-z\d\._-]+@([a-z\d-]+\.)+[a-z]{2,6}$/i‘preg_match(), preg_replace()Actual data that we are going to work upon (e.g. an email address string)Definition of the string pattern (the ‘Regular Expression’).PHP functions to do something with data and regular expression.
Exception Types“Checked” exceptions must be caught or thrown to callerCatching a parent also catches children“Unchecked” exceptions need not be handledHowever, if not handled exception continues to propagateError &amp;RuntimeExceptionhierarchies contain unchecked exceptionsDevelopers may define their own ExceptionsMay be checked or uncheckedArchitectural policy decisionUse to translate from low-level issue to application-level semanticstry {    // try to open a database connection here    Connection cn = ConnectionFactory.getConnection(“PaymentDB”);PreparedStatementps = cn.prepareStatement(“Insert into payments values (?, ?, ?)”, id, name, amt);ps.executeStatement();conn.commit();} catch (SQLException) {    throw new PaymentProcessException(“Unable to process your payment due to internal error SQL-0033”);}
Regular ExpressionsRegular expressions are a language for string patterns.RegEx is integral to many programming languages:&#9;Perl&#9;Python&#9;Javascript&#9;PHP&#9;C/C++&#9;grep (in Unix)&#9;Java (java.util.regex.*)&#9;and many moreRegEx is often the best way to validate String input.A RegEx is compared with a String, looking for a “match”.style.visibilitystyle.visibilitystyle.visibilitystyle.visibility
In-depth: Java ExceptionsPartial view of Java exception hierarchy:Catching an exception’s parent catches all childrenCatching Exception catches all predefined exceptionsCatching Throwable catches everything
7. Regular ExpressionsDefined: A method of specifying a search string using a number of special characters that can precisely match a substring.Purpose: Regular expressions allow you to perform complex pattern matching on strings.  A small regular expression can replace the need for a large amount of codeExample for e-mail validation:^[A-Za-z0-9._%-]+@[A-Za-z0-9._%-]+\.[A-Za-z]{2,4}$
Validation ChecksData type check: is used to ensure that a data item fits the required data type. For example, a numeric field must have only numbers or numeric symbols, and an alphabetic field can contain only the characters A through Z or the characters a through z. Range check – limit check: tests data items to verify that they fall between a specified minimum and maximum value. The daily hours worked by an employee, for example, must fall within the range of 0 to 24. Validity check: is used for data items that must have certain values. For example, if an inventory system has 20 valid item classes, then any input item that does not match one of the valid classes will fail the check. Combination check: performed on two or more fields to ensure that they are consistent or reasonable when considered together. Even though all the fields involved in a combination check might pass their individual validation checks, the combination of the field values might be inconsistent or unreasonable. &lt;number&gt;style.visibility
ROBUST PROGRAMS AND MITIGATION STRATEGIESLECTURE 9: SECURE AND RESISTANT PROGRAMS&lt;number&gt;
&lt;number&gt;Trace a Program Executionanimationtry {    statement1;  statement2;  statement3;}catch(Exception1 ex) {   handling ex; }catch(Exception2 ex) {   handling ex;   throw ex;}finally {   finalStatements; }Next statement;statement2 throws an exception of type Exception2.style.visibilityppt_xppt_y
10. Log errors for your technical support personnelConsider leaving debugging aids in the production code but changing their behavior so that it’s appropriate for the production version. If you’ve loaded your code with assertions that halt the program during development, you might considering changing the assertion routine to log messages to a file during production rather than eliminating them altogether.11. See that the error messages you leave in are friendlyIf you leave internal error messages in the program, verify that they’re in language that’s friendly to the user. In one of my early programs, I got a call from a user who reported that she’d gotten a message that read “You’ve got a bad pointer allocation, Dog Breath!” Fortunately for me, she had a sense of humor. A common and effective approach is to notify the user of an “internal error” and list an email address or phone number the user can use to report it.Robust Programming Techniques
Robust Programming TechniquesBest Practices (Exception Handling, continued)Handling an exception in a method implementationDo not ignore exceptions if thrown to youCalled “swallowing” exceptionstry { &lt;some code that could throw an exception here&gt;} catch (SomeException se) {}Be aware of the exceptions a 3rd party library you rely on may generate; consider strategies for handling if it does.Handle as much of an exception as you can, then re-throw with as much information as possible.Consider consistent design strategiesCentralized exception reporting mechanism“Stateful” components that can be queried in exception casesBased on Chapter 8, Code Complete 2, Steve McConnell
Robust Programming TechniquesAssertions in Java:General Form: asset Expr1 : Expr2Where Expr1 is a boolean expression and Expr2 is generally a String.Examples:&#9;assert denominator != 0 : “Division by zero!”;&#9;assert operand &gt; 0 : “Square root operand should be non-negative”Java assertions are enabled at runtimeA behavior of the classloader&#9;// Enables assertions for the entire application&#9;% java –ea &lt;your Main class here&gt;&#9;// Enabling assertions only for TestClass and package TestPackage&#9;% java –ea:TestClass –ea:TestPackage&#9;// Enable assertions for default package, disable for TestPackage&#9;% java –ea:… -da:TestPackage
Input ValidationInput ValidationValidationEnsuring that the specification is correctDetermine that the software to be built is actually what the user wants!VerificationEnsuring that the software runs correctlyInput validation is when a system will check that the input meets certain criteria, so to ensure that the data is in an acceptable form.For example, if a user is to input their email address to enable them to sign up to a user account, input validation can check to see if the entered email address in the expected form (contains an @ symbol and ends with a domain type (.co.uk)).If the entered address doesn’t contain these items then it can be rejected in order to ensure that only valid data is entered by the user.style.visibilityppt_xppt_ystyle.visibilityppt_xppt_ystyle.visibilityppt_xppt_y
12/03/24Exception Handling in Java&lt;number&gt;Code Examples1. Demonstration of an unchecked exception (NullPointerException)2. Demonstration of checked exceptions:Passing a DivideByZeroExceptionHandling a DivideByZeroException
8. Leave in code that checks for important errorsDecide which areas of the program can afford to have undetected errors and which areas cannot. For example, if you were writing a spreadsheet program, you could afford to have undetected errors in the screen-update area of the program because the main penalty for an error is only a messy screen. You could not afford to have undetected errors in the calculation engine because the errors might result in subtly incorrect results in someone’s spreadsheet. Most users would rather suffer a messy screen than incorrect tax calculations and an audit by the IRS.9. Leave in code that helps the program crash gracefullyThe opposite is also true. If your program contains debugging code that detects potentially fatal errors, leave the code in that allows the program to crash gracefully. In the Mars Pathfinder, for example, engineers left some of the debug code in by design. An error occurred after the Pathfinder had landed. By using the debug aids that had been left in, engineers at JPL were able to diagnose the problem and upload revised code to the Pathfinder, and the Pathfinder completed its mission perfectly (March 1999).Robust Programming Techniques
Robust Programming Techniques2. Exception HandlingExceptions represent an unexpected but not unanticipated behavior of the system.Exceptions are intrusive; they violate encapsulation and ordered control flow principlesBest PracticesThrowing an exception in a method implementation:Use exceptions for unexpected situations that shouldn’t be ignoredThrow an exception only in exceptional situationsInclude in an exception all information available regarding the exceptional situationException handling should be in the called methodStandardize your project’s use of exceptions!Based on Chapter 8, Code Complete 2, Steve McConnell
Assertions in Python:
Input SanitisationInput SanitisationThis is where data entered is cleaned of any unwanted characters that the user may enter.For example, if a user is entering a password, it may be sensible to strip out any spaces, so to avoid the potential security threat of an SQL injection attack.…what is an SQL injection??style.visibilityppt_xppt_ystyle.visibilityppt_xppt_ystyle.visibilityppt_xppt_y
12/03/24Exception Handling in Java&lt;number&gt;Coding ExceptionsPassing the exceptionIn any method that might throw an exception, you may declare the method as “throws” that exception, and thus avoid handling the exception yourselfExamplepublic void myMethod throws IOException {… normal code with some I/O}
PHP Functions and Examples// Check if a user&apos;s name is made up of 8-12 // alphanumeric charactersif (preg_match(&apos;/^[A-Za-z0-9]{8,12}$/&apos;, $username)) {  // OK}// The pattern /a[\S]*/ matches a substring that starts with// &apos;a&apos; and follows by any number of non-white space characters.if (preg_match(&apos;/a[\S]*/&apos;, &quot;x abc faa axx&quot;, $match) {  // $match is the first substring that matches the pattern  echo $match;     // Output abc}if (preg_match_all(      &apos;/a[\S]*/&apos;, &quot;x abc faa axx&quot;, $matches) {  // $matches becomes an array containing &quot;abc&quot;, &quot;aa&quot;, and &quot;axx&quot;}
1. Error-handlingMost errors are not expected, but they are knownPlan for these errors and your recovery action(s)Possible error handling strategies:Return a neutral value (zero, empty string, etc.)Substitute the next piece of valid data – particularly useful in systems that process continuous data feedsReturn the same answer as the previous invocationSubstitute closest legal value (zero, bounded array)Log a warning message to a file (usually do anyway)Return an error code, delegate to dedicated handlersCentralize error handlingHandle the error locally* (this is the best alternative!)Abort the request and possibly shut down the systemBased on Chapter 8, Code Complete 2, Steve McConnellRobust Programming Techniques
AssertionsUse error handling code for conditions you expect to occur; use assertions for conditions that should never occurAssertions check for conditions that should never occur. Error handling code checks for off-nominal circumstances that might not occur very often, but that have been anticipated by the programmer who wrote the code and that need to be handled by the production code. Error-handling typically checks for bad input data; assertions check for bugs in the code.If error handling code is used to address an anomalous condition, the error handling will enable the program to respond to the error gracefully. If an assertion is fired for an anomalous condition, the corrective action is not merely to handle an error gracefully—the corrective action is to change the program’s source code, recompile, and release a new version of the software.A good way to think of assertions is as executable documentation—you can’t rely on them to make the code work, but they can document assumptions more actively than program-language comments can.Robust Programming Techniques
Unwanted InputsInput SanitisationWhat do we mean by input validation function and input sanitization function?Input validation …Input sanitization function is a function which takes a set of inputs which may contain a subset of malicious values and gives a set of outputs that only contain benign valuesValidation checks if the input meets a set of criteria (such as a string contains no standalone single quotation marks). Sanitization modifies the input to ensure that it is valid (such as doubling single quotes). You would normally combine these two techniques to provide in-depth defense to your application.
12/03/24Exception Handling in Java&lt;number&gt;Coding ExceptionsTry-Catch MechanismYou may also write an optional “finally” block. This block contains code that is ALWAYS executed, either after the “try” block code, or after the “catch” block code.Finally blocks can be used for operations that must happen no matter what (i.e. cleanup operations such as closing a file)Exampletry {… normal program code}catch(Exception e) {… exception handling code}
Boolean MatchingWe can use the function preg_match() to test whether a string matches or not.// match an email$input = ‘rob@example.com’;if (preg_match($emailRegex,$input) {&#9;echo ‘Is a valid email’;} else {&#9;echo ‘NOT a valid email’;}
String analysis determines all possible values that a string expression can take during any program executionUsing string analysis we can identify all possible input values of the sensitive functionsThen we can check if inputs of sensitive functions can contain attack strings How can we characterize attack strings?Use regular expressions to specify the attack patternsAttack pattern for XSS:  Σ∗&lt;scriptΣ∗If string analysis determines that the intersection of the attack pattern and possible inputs of the sensitive function is emptythen we can conclude that the program is secureIf the intersection is not empty, then we can again use string analysis to generate a vulnerability signaturecharacterizes all malicious inputsGiven Σ∗&lt;scriptΣ∗ as an attack pattern:The vulnerability signature for $_GET[”www”] is                  &#9;Σ∗&lt;α∗sα∗cα∗rα∗iα∗pα∗tΣ∗&#9;where α∉ { A-Za-z0-9 .-@:/ }&lt;number&gt;String Analysis
Use assertions to document assumptions made in the code and to flush out unexpected conditions. Assertions can be used to check assumptions like these:● That an input parameter’s value falls within its expected range (or an output parameter’s value does)● That a file or stream is open (or closed) when a routine begins executing (or when it ends executing)● That a file or stream is at the beginning (or end) when a routine begins executing (or when it ends executing)● That a file or stream is open for read-only, write-only, or both read and write● That the value of an input-only variable is not changed by a routine● That a pointer is non-NULL● That an array or other container passed into a routine can contain at least X number of data elements● That a table has been initialized to contain real values● That a container is empty (or full) when a routine begins executing (or when it finishes)Robust Programming Techniques
So.. An exampleLets define a regex that matches an email:$emailRegex = &apos;/^[a-z\d\._-]+@([a-z\d-]+\.)+[a-z]{2,6}$/i‘;&#9;Matches: ‘rob@example.com’,&#9;         ‘rob@subdomain.example.com’&#9;         ‘a_n_other@example.co.uk’&#9;Doesn’t match: ‘rob@exam@ple.com’&#9;               ‘not.an.email.com’&#9;
Whitelists and BlacklistsDeciding on what to sanitise and validate…There are of course an overwhelming number of different inputs that users could enter into a system and to plan against every one can be a very difficult process.Software developers will often use whitelists or blacklists to help them plan against unwanted inputs.A whitelist is a lists of data that the program being created, should accept. All other data should be rejected by the program.A blacklist is a list of data that the program being created, should reject. All other data should be accepted by the program.Which do you think will be the most effective at preventing unwanted inputs and why?style.visibilityppt_xppt_ystyle.visibilityppt_xppt_ystyle.visibilityppt_xppt_ystyle.visibilityppt_xppt_ystyle.visibilityppt_xppt_y
All Input is EvilOne should always take it that All input is evil:At least potentiallyInput can be: (A random collection)FilesWeb formsCookiesRegistry entriesDatabase contentsCommand line argumentsEnvironmental variablesHTTP requestsNamed pipes E-mail…
CHECKLIST: Robust ProgrammingSecurity Issues􀂉 Does the code that checks for bad input data check for attempted buffer overflows, SQL injection, html injection, integer overflows, and other malicious inputs?􀂉 Are all error-return codes checked?􀂉 Are all exceptions caught?􀂉 Do error messages avoid providing information that would help an attacker break into the system?
So.. An example/^[a-z\d\._-]+@([a-z\d-]+\.)+[a-z]{2,6}$/i&#9;Starting delimiter, and start-of-string anchorUser name – allow any length of letters, numbers, dots, underscore or dashesThe @ separatorDomain (letters, digits or dash only). Repetition to include subdomains.com,uk,info,etc.End anchor, end delimiter, case insensitive
Kendall &amp; KendallLwomwa Joseph&lt;number&gt;Sources of Input that Need ValidationWhat are sources of input for local applications?Command line argumentsEnvironment variablesConfiguration files, other filesInter-Process Communication call argumentsNetwork packetsWhat are sources of input for web applications?Web form inputScripting languages with string inputstyle.visibilitystyle.visibilitystyle.visibilitystyle.visibilitystyle.visibilitystyle.visibilitystyle.visibility
Kendall &amp; KendallLwomwa Joseph19-&lt;number&gt;Data-Entry/Input MethodsData-entry/input methods includeKeyboardsOptical character recognitionMagnetic ink character recognitionMark-sense formsBar codesIntelligent terminals
Finding Common Entry PointsFilesContain data specified by usersContain data supplied by applicationCan be intentionally or unintentionally corruptedAttacker can also attack file metadata:ExtensionPathFile system attributes…
Why consider the interface and its input areasConsider all user input as harmful until proven otherwise.Look for valid input and deny everything else. Do not do the opposite and look for invalid data, reject it, and then let everything else in.Hackers can circumvent client-side validation. Consider performing validation often and close to the threats. For example, validate data on the server before committing it to a database.Invalidate input that is too large.Invalidate input that contains dangerous characters or keywords, such as scripting elements (&lt;script&gt;, &lt;object&gt;), reserved SQL characters and keywords (- -, INSERT, xp_cmdshell), or file traversal characters (..\).&lt;number&gt;
Regular Expression NotationAny single character is a regex.The period (‘.’) is a regex.  (A period matches any single character.)If R1 and R2 are regexs, then so is&#9;          -- matches R1 followed immediately by R2Examples(red|blue) fish(0|1|2|3)(A|B|C).!Write a regEx to match any possible digital time.-?(0|1|2|3|4|5|6|7|8|9)+(0|1|2|3|4|5|6|7|8|9){3}-(0|1|2|3|4|5|6|7|8|9){4}Write a regEx to match any possible Social Security Numberstyle.visibilitystyle.visibilitystyle.visibilitystyle.visibilitystyle.visibilitystyle.visibilitystyle.visibilitystyle.visibility
Kendall &amp; KendallLwomwa Joseph&lt;number&gt;Input ControlEvery piece of information should be traceable back to the input dataYou must provide Audit trailAn audit trail records the source of each data item and when it entered a system. In addition to recording the original source, an audit trail must show how and when data is accessed or changed, and by whom. All these actions must be logged in an audit trail file and monitored carefully. Data securityData security protects data from loss or damage and recovers data when it is lost or damaged. Records retention policyA records policy that is designed to meet all legal requirements and business needs for keeping records Robust Design and Programming Strategiesstyle.visibility
12/03/24Exception Handling in Java&lt;number&gt;ExceptionsExceptions – a better error handlingExceptions are a mechanism that provides the best of both worlds.Exceptions act similar to method return flags in that any method may raise and exception should it encounter an error.Exceptions act like global error methods in that the exception mechanism is built into Java; exceptions are handled at many levels in a program, locally and/or globally.
AuthenticationAuthenticationAnother defensive strategy is to ensure that systems have some form of authentication.In other word, having passwords to only allow certain users……and potentially limiting the access of the various parts of the system (access rights).Security can be increased further by ensuring that users update their password regularly, have complex passwords and limit login attempts.style.visibilityppt_xppt_ystyle.visibilityppt_xppt_ystyle.visibilityppt_xppt_ystyle.visibilityppt_xppt_y
CHECKLIST: Robust Programming􀂉 Have you used offensive programming techniques to make errors difficult to overlook during development?Exceptions􀂉 Has your project defined a standardized approach to exception handling?􀂉 Have you considered alternatives to using an exception?􀂉 Is the error handled locally rather than throwing a non-local exception if possible?􀂉 Does the code avoid throwing exceptions in constructors and destructors?􀂉 Are all exceptions at the appropriate levels of abstraction for the routines that throw them?􀂉 Does each exception include all relevant exception background information?􀂉 Is the code free of empty catch blocks? (Or if an empty catch block truly is appropriate, is it documented?)
Robust Programming TechniquesAssertionsTypically a boolean condition that takes some notification action when the condition is falseSupported in many languages: VB, C++, JavaBest Practices for AssertionsUsed during development and test; not used when the code is deployed to production!False assertions should fail hard; these scenarios represent situations that were never expected to occur!Avoid putting executable code in assertionsE.g. “assert Util.check(obj)” where method check modifies objUse to document and verify pre/post conditionsBased on Chapter 8, Code Complete 2, Steve McConnell
Vulnerabilities in ApplicationsThere are many well-known security vulnerabilities that exist in many web applications. Here are some examples:SQL injection: where a malicious user executes SQL commands on the back-end database by providing specially formatted inputCross site scripting (XSS): causes the attacker to execute a malicious script at a user’s browserMalicious file execution: where a malicious user causes the server to execute malicious codeBufferoverflowThese vulnerabilities are typically due to errors in user input validation and sanitization or lack of user input validation and sanitization&lt;number&gt;
Robust ProgrammingCalled method is responsible for ensuring the integrity of the inputAll input must be validated before the function is runDecide a priori how to handle bad inputsExample (Wikipedia):Based on Chapter 8, Code Complete 2, Steve McConnellDefensive Programming is paranoid; it assumes “Murphy’s Law”: whatever can go wrong, (eventually) willintlow_quality_programming(char *input){   char str[1000+1]; // one more for the null charstrcpy(str, input); // copy input   ...}inthigh_quality_programming(char *input){  char str[1000+1]; // one more for the null characterstrncpy(str, input, 1000); // copy input, only copy                //a maximum length of 1000 charactersstr[1000] = &apos;\0&apos;; // add terminating null character...}
Validation Controls Exercise&lt;number&gt;
Correctness: “…never returning an inaccurate result; returning no result is better than returning an inaccurate result”Example: Mission-critical applicationsRobustness:“…always trying to do something that will allow the software to keep operating, even if it leads to results that are inaccurate sometimes.” (McConnell, Code Complete 2, p. 197)Example: Most consumer applicationsCorrectness vs. Robustness
CHECKLIST: Robust Programming􀂉 Does the routine protect itself from bad input data?􀂉 Have you used assertions to document assumptions, including preconditions and postconditions?􀂉 Have assertions been used only to document conditions that should never  occur?􀂉 Does the architecture or high-level design specify a specific set of error handling techniques?􀂉 Does the architecture or high-level design specify whether error handling should favor robustness or correctness?􀂉 Have barricades been created to contain the damaging effect of errors and reduce the amount of code that has to be concerned about error processing?􀂉 Have debugging aids been used in the code?􀂉 Has information hiding been used to contain the effects of changes so that they won’t affect code outside the routine or class that’s changed?􀂉 Have debugging aids been installed in such a way that they can be activated or deactivated without a great deal of fuss?􀂉 Is the amount of defensive programming code appropriate—neither too much nor too little?
6. AssertionsAn assertion is code that’s used during development—usually a routine ormacro—that allows a program to check itself as it runs. When an assertion is true, that means everything is operating as expected. When it’s false, that means it has detected an unexpected error in the code. For example, if the system assumes that a customer-information file will never have more than 50,000 records, the program might contain an assertion that the number of records is less than or equal to 50,000. As long as the number of records is less than or equal to 50,000, the assertion will be silent. If it encounters more than 50,000 records, however, it will loudly “assert” that there is an error in the program.Assertions are especially useful in large, complicated programs and in high reliability programs. They enable programmers to more quickly flush out mismatched interface assumptions, errors that creep in when code is modified, and so on.Robust Programming Techniques
Kendall &amp; KendallLwomwa Joseph&lt;number&gt;Input ControlInput control includes the necessary measures to ensure that input data is correct, complete, and secure. A systems analyst must focus on input control during every phase of input design, starting with source documents that promote data accuracy and quality. A system analyst must take into considerationAccess – legal channels of getting resources Identification – to uniquely distinguish a user  of a resourceAuthentication – to prove positively that the user is what he/she claims to be.Authorization – being able to determine and allow the user only those resources the user has ability to utilize.Robust Design and Programming Strategiesstyle.visibility
Overview“Safety” can imply a lot of thingsEntire areas in software engineering devoted to:Fault toleranceReliabilityFormal methods for correctnessFault avoidanceFailure mode analysisThis discussion is at a much lower level:What simple programming practices can we adopt at a low-level to improve the correctness and robustness of our source code?One-half of this (or more) is in personal quality practices such as unit testing, code reviews, and coding standardsOther half is in the approach to coding itself (today’s topic)
11. Being Defensive About Defensive ProgrammingToo much defensive programming creates problems of its own. If you check data passed as parameters in every conceivable way in every conceivable place, your program will be fat and slow. What’s worse, the additional code needed for defensive programming adds complexity to the software. Code installed for defensive programming is not immune to defects, and you’re just as likely to find a defect in defensive-programming code as in any other code—more likely, if you write the code casually. Think about where you need to be defensive, and set your defensive-programming priorities accordingly.Robust Programming Techniques
Robust Programming TechniquesOther useful techniques:3. LoggingDump as much output during program execution as you can computationally afford to do.Trap abnormal system exits and provide dump4. Use Aspects to augment behaviors during development and testingCan introduce logging, pre/post checks, etc. without the code intrusion caused by other techniques.5. Apply various Design Patterns to create regions of code that can make safety assumptionsA region could be defined by class, package, or component interaction boundariesSee next slide
Why consider the interface and its input areasUse the mantra: Constrain, Reject, and Sanitize.One of the most powerful ways to constrain data input is through validation controls and regular expressions. The example regular expression ( \w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)* ) checks that the input string is of the correct form for an Internet e-mail address.&lt;number&gt;
One of the paradoxes of defensive programming is that during  development, you’d like an error to be noticeable—you’d rather have it be obnoxious than risk overlooking it. But during production, you’d rather have the error be as unobtrusive as possible, to have the program recover or fail gracefully. Here are some guidelines for deciding which defensive programming tools to leave in your production code and which to leave out:Robust Design and Programming Strategies
12/03/24Exception Handling in Java&lt;number&gt;ExceptionsHow are they used?Exceptions fall into two categories:Checked ExceptionsUnchecked ExceptionsChecked exceptions are inherited from the core Java class Exception. They represent exceptions that are frequently considered “non fatal” to program executionChecked exceptions must be handled in your code, or passed to parent classes for handling.Unchecked exceptions represent error conditions that are considered “fatal” to program execution.You do not have to do anything with an unchecked exception.  Your program will terminate with an appropriate error message.
When designing programs we need to ensure that they are robust.Failure to do this may result in two critical outcomes:The program wont function correctly / will not do the job its supposed to do.The program may be unsecure and data that it holds may become compromised.Both outcomes are unacceptable. Luckily there are a ways that we can minimise these issues, through defensive design strategies, which will ensure the robustness of our software solutions:Input SanitisationAnticipating Misuse and Input ValidationAuthenticationMaintainability of CodeTestingRobust Design and Programming StrategiesRobust Learning Objectives :To understand…- Robust design considerations:   o input sanitisation/validation   o planning for contingencies   o anticipating misuse   o authentication- maintainability:   o comments   o indentation- the purpose of testing- types of testing:   o iterative   o final/terminal- how to identify syntax and logic errors- selecting and using suitable test data.style.visibilityppt_xppt_ystyle.visibilityppt_xppt_ystyle.visibilityppt_xppt_ystyle.visibilityppt_xppt_ystyle.visibilityppt_xppt_ystyle.visibilityppt_xppt_ystyle.visibilityppt_xppt_ystyle.visibilityppt_xppt_ystyle.visibilityppt_xppt_ystyle.visibilityppt_xppt_y
12/03/24Exception Handling in Java&lt;number&gt;ExceptionsHow do you handle exceptions?Exception handling is accomplished through the “try – catch” mechanism, or by a “throws” clause in the method declaration.For any code that throws a checked exception, you can decide to handle the exception yourself, or pass the exception “up the chain” (to a parent class).To handle the exception, you write a “try-catch” block.  To pass the exception “up the chain”, you declare a throws clause in your method or class declaration.If the method contains code that may cause a checked exception, you MUST handle the exception OR pass the exception to the parent class (remember, every class has Object as the ultimate parent)
