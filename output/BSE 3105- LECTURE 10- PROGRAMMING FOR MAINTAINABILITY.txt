Maintenance Costs (cont’d)Time and money (software that costs £ 10 a line to develop costs £ 400 a line to maintain)Organizations become maintenance bound and cannot produce new softwareCustomer dissatisfaction when seemingly legitimate requests for repair or modification cannot be addressed in a timely mannerReduction in overall software quality as changes introduce latent errors in the maintained softwareUpheaval caused during development efforts when staff must be “pulled” to work on a maintenance task
Usually greater than development costs (2* to 100* depending on the application)Affected by both technical and non-technical factorsIncreases as software is maintained. Maintenance corrupts the software structure so makes further maintenance more difficult.Ageing software can have high support costs (e.g. old languages, compilers etc.)Maintenance Costs
Maintenance Prediction (cont’d)Process measurements may be used to assess maintainabilityNumber of requests for corrective maintenanceAverage time required for impact analysisAverage time taken to implement a change requestNumber of outstanding change requestsIf any or all of these is increasing, this may indicate a decline in maintainability
9.2 Types of Software Maintenance
Problems in Managing Maintenance (cont’d)From survey of 60 US &amp; Canadian companies in Software Maintenance News 1992These are the consequence of the lack of tools and techniques for software maintenance and its management.We need predictive models of maintenance to estimate how much effort needs to go into maintenance.By and large maintainers work in isolation and are not closely managed. Each one has to learn from personal experience good methods of working.
Data Problems (cont’d)Data naming problemsNames may be hard to understand. The same data may have different names in different programsField length problemsThe same item may be assigned different lengths in different programsRecord organisation problemsRecords representing the same entity may be organised differently in different programsHard-coded literalsNo data dictionary
Software Evolution Approaches (cont’d)Architectural transformationThis is a more radical approach to software change than maintenance as it involves making significant change to the architecture of the system.Software re-engineering This is different from other strategies in that no new functionality is added to the system. System re-engineering may involve some structural modifications but does not usually involves major architectural change.
Problems in Managing MaintenanceChanging prioritieschaotic nature of maintenance requests, the length of maintenance tasks causing new requests to come along before an ongoing task is done.Inadequate testing methodslack of time set aside for testing, of comprehensive test data, of rigorous testing requirements as a standard for signing off.Performance measurement difficultieshow do you measure individual or group performance?System documentation incomplete or non-existenttraining takes a long time for learning an application so programmers get stuck on one piece of software.Adapting to the rapidly changing business environmenthardware and software also become obsolete.
Data ProblemsEnd-users want data on their desktop machines rather than in a file system. They need to be able to download this data from a DBMSSystems may have to process much more data than was originally intended by their designersRedundant data may be stored in different formats in different places in the system
Coding Side EffectsAny change can cause side-effects but these tend to be more error prone a subprogram is deleted or changed A statement label is deleted or modifiedAn identifier is deleted or modifiedChanges are made to improve execution performance
Maintenance effort distribution .[SOM2004]style.visibilitystyle.visibility
Software Evolution ApproachesThere are a number of different strategies for software change.[SOM2004]Software maintenanceArchitectural transformationSoftware re-engineering.Software maintenanceChanges to the software are made in response to changed requirements but the fundamental structure of the software remains stable. This is most common approach used to system change.
What Affects the Maintainability of anApplication? (cont’d)Maintenance managementscheduling and the attitudes of management to affects productivity
Approaches to Data Re-engineering [SOM2004]
Documentation Side EffectsThese consist of the failure to update documentation so that it no longer matches the code.If the user doesn’t know about changes frustration is inevitable.The entire documentation should be reviewed before re-release
CommentsComments in programs serve a number of purposesTo inform the reader of a bug or issuesTo explain the code and its function in more detailTo stop a line of section of code from executing
Program Evolution Dynamic (cont’d)LawDescriptionLarge program evolutionProgram evolution is self-regulation process. System attributes such as size, time between release and the number of report errors are approximately invariant for each system releaseOrganizational stabilityOver a program’s lifetime, its rate of development is approximately  constant and independent of the resources devoted to the system developmentConservation of familiarityOver the lifetime of system, the incremental change in each release is approximately constant.style.visibility
What Affects the Maintainability of anApplication? (cont’d)Modularization(central thesis of all the oop techniques) small reasonably self contained pieces of code should be easier to maintainDocumentation generationmaintenance of documentation is as expensive as maintenance of codeEnd-user involvementsome researchers believe when end users are more involved maintenance decreases
Data Re-engineeringInvolves analysing and reorganising the data structures (and sometimes the data values) in a programMay be part of the process of migrating from a file-based system to a DBMS-based system or changing from one DBMS to anotherObjective is to create a managed data environment
Maintenance Side EffectsIn this context a side effect implies an error or undesirable behavior that occurs as the result of a modification.the three major areas are[PRE2004]codedata structuresdocumentation
IndentationCode is indented for a number of reasons.To group together a functionThe code does not use a { syntax and indentation is used insteadIf altering a function in the future it can be easily found.
Program Evolution DynamicLawDescriptionContinuing changeA program that is used in real-world environment necessarily must change or become progressively less useful in that environment.Increasing complexity As an evolving program changes, its structure tends to become more complex. Extra resources must be devoted to preserving and simplify the structure.Program evolution dynamic is the study of system change. The majority of work in this area has been carried out by  Lehman and Belady. From these studies , they proposed a sets of laws concerning system change.style.visibility
Data Abstraction RecoveryAnalyse common data areas to identify logical abstractionsCreate an abstract data type or object class for each of these abstractionsProvide functions to access and update each field of the data abstractionUse a program browser to find calls to these data abstractions and replace these with the new defined functions
Legacy System Structures [SOM2004]
The Program Translation Process [SOM2004]
Maintenance to repair software faultsChanging a system to correct deficiencies in the way meets its requirementsMaintenance to adapt software to a different operating environmentChanging a system so that it operates in a different environment (computer, OS, etc.) from its initial implementationMaintenance to add to or modify the system’s functionalityModifying the system to satisfy new requirementsTypes of Maintenance
9.5 Qualities in Maintenance
Change RequestsChange requests are requests for system changes from users, customers or managementIn principle, all change requests should be carefully analysed as part of the maintenance process and then implementedIn practice, some change requests must be implemented urgentlyFault repairChanges to the system’s environmentUrgently required business changes
Software Rejuvenation (cont’d)Reverse EngineeringAnalyzing a system to extract information about the behavior and/or structurealso Design Recovery - recreation of design abstractions from code, documentation, and domain knowledgeGenerates:structure charts, entity relationship diagrams, DFDs, requirements modelsRe-engineeringExamination and alteration of a system to reconstitute it in another formAlso known as renovation, reclamation
What Affects the Maintainability of anApplication? (cont’d)Processing environmentfiles harder to maintain than databases, real-time harder than batchAnalysis and design methodologieswell designed software is supposed to be much easier to maintainStructured programmingthere is conflicting evidence whether this really helps
Software EvolutionIt is impossible to produce system of any size which do not need to be changed. Once software is put into use, new requirements emerge and existing requirements changes as the business running that software changes.Parts of the software may have to be modified to correct errors that are found in operation, improve its performance or other non-functional characteristics.All of this means that, after delivery, software systems always evolve in response to demand for change.
Recovering Data AbstractionsMany legacy systems use shared tables and global data to save memory spaceCauses problems because changes have a wide impact in the systemShared global data may be converted to objects or Abstract Data TypesAnalyse common data areas to identify logical abstractionsCreate an ADT or object for these abstractionsUse a browser to find all data references and replace with reference to the data abstraction
Maintenance ExamplesY2Kmany, many systems had to be updatedlanguage analyzers (find where changes need to be made)Anti-Virus Softwaredon&apos;t usually have to update software, but must send virus definitions
Automatic Program Restructuring [SOM2004]
User Interface DistributionUI distribution takes advantage of the local processing power on PCs to implement a graphical user interfaceWhere there is a clear separation between the UI and the application then the legacy system can be modified to distribute the UIOtherwise, screen management middleware can translate text interfaces to graphical interfaces
Change ManagementChange is a fact of life for large software. A defined change management process and associated CASE tools ensure that  these changes are recorded and applied to the system in a cost-effective way.The change management process should come into effect when the software associated document is put under the control of the configuration management team.Change management procedures should be designed to ensure that the costs and benefits of change are properly analyzed and changes to a system  are made in a controlled way.
Coding Side Effects (cont’d)Logical operators are modifiedFiles are opened or closedDesign changes which translate into major code changesChanges are made to logical tests of boundary conditionsThese may be caught in testing or cause software failure during operation.
9.3 Maintenance Techniques
The Re-engineering Process [SOM2004]
Maintenance Examples (cont’d)Operating System PatchingMicrosoft, Apple, Linux/UnixOS is core to use of computer, so it must be constantly maintainedCommercial Software in Generalcustomers need to be informed of updatesupdates have to be easily available - web is good tool
Software Maintenance
Restructuring ProblemsProblems with re-structuring are:Loss of commentsLoss of documentationHeavy computational demandsRestructuring doesn’t help with poor modularisation where related components are dispersed throughout the codeThe understandability of data-driven programs may not be improved by re-structuring
User Interface Distribution [SOM2004]
Re-Engineering Cost FactorsThe quality of the software to be re-engineeredThe tool support available for re-engineeringThe extent of the data conversion which is requiredThe availability of expert staff for re-engineering
Architectural EvolutionThere is a need to convert many legacy systems from a centralised architecture to a client-server architectureChange driversHardware costs. Servers are cheaper than mainframesUser interface expectations. Users expect graphical user interfacesDistributed access to systems. Users wish to access the system from different, geographically separated, computers
Data Side EffectsData side effects occur as the result of modifications made to a data structure. The most error-prone are:redefinition of local and global constantsredefinition of record or file formatsIncr. or decr. in size of array or other data structuremodification of global datare initialization of control flags and pointersrearrangements of parameters (especially in I/O)
Data ConversionData re-engineering may involve changing the data structure organisation without changing the data valuesData value conversion is very expensive. Special-purpose programs have to be written to carry out the conversion
Maintenance PredictionMaintenance prediction is concerned with assessing which parts of the system may cause problems and have high maintenance costsChange acceptance depends on the maintainability of the components affected by the changeImplementing changes degrades the system and reduces its maintainabilityMaintenance costs depend on the number of changes and costs of change depend on maintainability
References[PRE2004] Roger S. Pressman. Software Engineering: a practitioner’s approach, 6th edition. McGRAW-HILL, 2004. [SOM2004] Ian Sommerville. Software Engineering, 7th edition. Addison Wesley, 2004
SummaryMaintenance activities made up ofCorrectiveAdaptivePerfectivePreventiveMost work spent in Perfective maintenanceSoftware evolution makes maintenance inescapableProblems can be mitigated by avoiding poor documentation, unstructured code, insufficient knowledge about the system or design for the maintenance programmersMaintenance requires a service mentality
The Reverse Engineering Process [SOM2004]
Source Code TranslationInvolves converting the code from one language (or language version) to another e.g. FORTRAN to CMay be necessary because of:Hardware platform updateStaff skill shortagesOrganisational policy changesOnly realistic if an automatic translator is available
What Affects the Maintainability of anApplication? Application age(software rust?) older programs were probably worse written and have probably been patched moreSizemeasured in KLOC, number of input/output filesProgramming language4gls are supposed to produce more maintainable code than 3gls(generation languages)
Maintenance CharacteristicsWe need to look at maintenance from three different viewpoints: [PRE2004]the activities required to accomplish the maintenance phase and the impact of a software engineering approach (or lack thereof) on the usefulness of such activitiesthe costs associated with the maintenance phasethe problems that are frequently encountered when software maintenance is undertaken
Change Request Form [SOM2004]Project: Proteus/PCL-Tools&#9;&#9;&#9;Number: 23/94Change requester: I.Sommerville&#9;&#9;Date: 1/9/98Requested change: when a component is selected from the structure, display the name of the file where it is stored.Change analyzer:  G.Dean&#9;&#9;&#9;analysis Date:10/9/98Components affected: Display-icon.Select, Display-icon.DisplayAssociated component: File TableChange assessment: Relatively simple to implement as a file name table is available. Requires the design and implementation of a display field. No changes to associated components are required.Change priority: LowChange implementation:Estimated effort: 0.5 daysDate to CCB: 15/9/98&#9;&#9;&#9;CCB decision date: 1/11/98Change implementor:&#9;&#9;&#9;Date of change:Date submitted to QA:&#9;&#9;&#9;QA decision:Date submitted to CM:&#9;&#9;comments&#9;CCB- change control board style.visibilitystyle.visibility
Re-Engineering Approaches [SOM2004]
Chapter 9 Software Maintenance9.1 Software Evolution9.2 Types of Software Maintenance9.3 Maintenance Techniques9.4 The Management of Maintenance9.5 Qualities in Maintenance9.6 Reengineering, Reverse Engineering and Forward EngineeringExercise
UI Migration Strategies [SOM2004]
The Data Re-engineering Process [SOM2004]
Maintenance Prediction (cont’d)Predicting the number of changes requires and understanding of the relationships between a system and its environmentTightly coupled systems require changes whenever the environment is changedFactors influencing this relationship areNumber and complexity of system interfacesNumber of inherently volatile system requirementsThe business processes where the system is used
Factors for Distribution
9.6 Re-engineering, Reverse Engineering and Forward Engineering,
Legacy System StructureIdeally, for distribution, there should be a clear separation between the user interface, the system services and the system data managementIn practice, these are usually intermingled in older legacy systems
Reverse EngineeringAnalysing software with a view to understanding its design and specificationMay be part of a re-engineering process but may also be used to re-specify a system for re-implementationBuilds a program data base and generates information from thisProgram understanding tools (browsers, cross-reference generators, etc.) may be used in this process
Maintenance Prediction (cont’d)Predictions of maintainability can be made by assessing the complexity of system componentsStudies have shown that most maintenance effort is spent on a relatively small number of system componentsComplexity depends onComplexity of control structuresComplexity of data structuresProcedure and module size
9.1 Software Evolution
Module typesData abstractionsAbstract data types where data structures and associated operations are groupedHardware modulesAll functions required to interface with a hardware unitFunctional modulesModules containing functions that carry out closely related tasksProcess support modulesModules where the functions support a business process or process fragment
Forward Engineering and Re-engineering [SOM2004]
Why is Maintenance Inefficient? (cont’d)More factors (Yip ’95 study)Lack of human resourcesDifferent programming styles conflictLack of documentation and toolsBad maintenance managementDocumentation policyTurnover
Development vs. Maintenancenot directly linked to the real worlddirectly driven by the real worldfreedomconstrained by existing systemdefects have no immediate effectdefects disrupt productionmethods availablesystem not using current methodsstandards may be enforcedshifting standards, if any
Team stabilityMaintenance costs are reduced if the same staff are involved with them for some timeContractual responsibilityThe developers of a system may have no contractual responsibility for maintenance so there is no incentive to design for future changeStaff skillsMaintenance staff are often inexperienced and have limited domain knowledgeProgram age and structureAs programs age, their structure is degraded and they become harder to understand and changeMaintenance Cost Factors
Distribution Option Spectrum [SOM2004]
Condition Simplification-- Complex conditionif not (A &gt; B and (C &lt; D or not ( E &gt; F) ) )...-- Simplified conditionif (A &lt;= B and (C&gt;= D or E &gt; F)...
Re-engineering AdvantagesReduced riskThere is a high risk in new software development. There may be development problems, staffing problems and specification problemsReduced costThe cost of re-engineering is often significantly less than the costs of developing new software
Why is Maintenance Inefficient and ineffective?  Factors adversely effect maintenanceLack of models or ignorance of available models (73%)Lack of documentation (67.6%)Lack of time to update existing documentation (54.1%)Other factors (1994 study)Quality of original applicationDocumentation qualityRotation of maintenance people
Structured Control Logic [SOM2004]
Distribution OptionsThe more that is distributed from the server to the client, the higher the costs of architectural evolutionThe simplest distribution model is UI distribution where only the user interface is implemented on the serverThe most complex option is where the server simply provides data management and application services are implemented on the client
Development/Maintenance Costs [SOM2004]
When system changes are mostly confined to part of the system then re-engineer that partWhen hardware or software support becomes obsoleteWhen tools to support re-structuring are availableWhen to Re-engineer
Emergency RepairEmergency repair [SOM2004]
Spaghetti Logic [SOM2004]
Legacy System Distribution [SOM2004]
Re-structuring or re-writing part or all of a legacy system without changing its functionalityApplicable where some but not all sub-systems of a larger system require frequent maintenanceRe-engineering involves adding effort to make them easier to maintain. The system may be re-structured and re-documentedSystem Re-engineering
Change ImplementationChange implementation. [SOM2004]
Program Structure ImprovementMaintenance tends to corrupt the structure of a program. It becomes harder and harder to understandThe program may be automatically restructured to remove unconditional branchesConditions may be simplified to make them more readable
Layered Distribution Model [SOM2004]
Change Management ProcessRequest change by completing a change request formAnalyze change requestIf change is valid then {Assess how change might be implementedAssess change costRecord change request in databaseSubmit request to change control board
Software MaintenanceSoftware maintenance is the general process of changing a system after it has been diverted. The change may be simple changes to correct coding errors, more extensive changes to correct design errors or significant enhancement to correct specification error or accommodate  new requirements.
Change Management Process (cont’d)If change is accepted then{&#9;Repeat{&#9;make changes to software&#9;record changes and link to associated change request&#9;submit changed software for quality approval}&#9;Until{&#9;software quality is adequate&#9;create new system version}}&#9;else&#9;{reject change request}}
MaintainabilityIf a program is to be defensive against attacks then it has to be maintained and up to date.  API and code changes, which means that programs will need to adapt to complement new requirements.Comments and indentation are two methods to provide information for future users or programmers that may be required to maintain the code.
Software RejuvenationRe-documentationCreation or revision of alternative representations of softwareat the same level of abstractionGenerates:data interface tables, call graphs, component/variable cross references etc.Restructuringtransformation of the system’s code without changing its behavior
The Maintenance ProcessMaintenance process  vary considerably depending on the types of software being maintained, the development processes used in an organization and people involved in the process.Change requestsImpact analysisRelease planningChange implementationSystem releaseFault repairPlatform adaptationSystem enhancementOverview of the Maintenance Process .[SOM2004]
